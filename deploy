#!/bin/bash

NAME="${GITHUB_REPO}_${GITHUB_BRANCH}"
NAME=${NAME//[\/\.]/-}
DEBUG=1


log() {
  if [[ "$DEBUG" == "1" ]]; then
    echo $@
  fi
}

if [[ -n "$ONLY_BRANCH" && "$ONLY_BRANCH" != "$GITHUB_BRANCH" ]]; then
  log "looking for $ONLY_BRANCH, got $GITHUB_BRANCH"
  exit 0
fi


if [[ -n "$DOCKER_AUTH" ]]; then
  mkdir -p $HOME/.docker
  CONFIG_FILE=$HOME/.docker/config.json
  log "Using DOCKER_AUTH"
  cat > $CONFIG_FILE <<- EOM
{
  "auths": {
    "https://index.docker.io/v1/": {
      "auth": "$DOCKER_AUTH"
    }
  }
}
EOM
fi

slack() {
  if [[ -n "$SLACK_HOOK" ]]; then
    local message=$1
    local color="${2:-good}"
    local username="${SLACK_NAME:-AutoDeploy}"
    local emoji="${SLACK_EMOJI:-:floppy_disk:}"
    local channel=$SLACK_CHANNEL
    curl -X POST \
      --data-urlencode "payload={\"attachments\": [{ \"title\": \"$message\",\"color\":\"$color\" }], \"username\": \"$username\", \"channel\":\"$channel\",\"icon_emoji\": \"$emoji\"}" \
      $SLACK_HOOK >> /dev/null 2>&1
    if [[ "$?" != 0 ]]; then
      log "!Error sending to slack"
    fi

  fi
}

if [[ -f "$DOCKER_ARGS_HOOK" ]]; then
  ARGS=$(bash $DOCKER_ARGS_HOOK)
fi

if [[ -n "$DOCKER_REGISTRY_AUTH" ]]; then
  AUTH_ARG="--with-registry-auth"
fi

if [[ -n "$SWARM_MODE" ]]; then
  docker service inspect $NAME > /dev/null 2>&1
  if [[ "$?" != 0 ]]; then
    log "$NAME doesn't exist, creating"
    docker service create $ARGS --name $NAME $AUTH_ARG $DOCKER_IMAGE
  else
    log "updating $NAME using $DOCKER_IMAGE"
    docker service update --image $DOCKER_IMAGE $AUTH_ARG $NAME
  fi

  if [[ "$?" != 0 ]]; then
    log "error running $NAME"
    slack "error starting $GITHUB_REPO#$GITHUB_BRANCH" "danger"
  else
    log "$NAME deployed"
    HOST="${NAME}.${DOMAIN}"
    slack "$GITHUB_REPO#$GITHUB_BRANCH deployed to $HOST"
  fi
else
  if [[ -z "$DOMAIN" ]]; then
    DOMAIN="*"
  fi

  HOST="${GITHUB_REPO}-${GITHUB_BRANCH}.${DOMAIN}"

  HOST=${HOST//[\/]/-}

  docker inspect $NAME > /dev/null 2>&1
  if [[ "$?" == 0 ]]; then
    log "$NAME exists, removing first"
    docker stop $NAME
    docker rm $NAME
  fi

  docker run -d \
    --name $NAME $ARGS \
    --env VIRTUAL_HOST=$HOST \
    --env NODE_ENV=$APP_NODE_ENV \
    $DOCKER_IMAGE

  if [[ "$?" != 0 ]]; then
    log "error running $NAME"
    slack "error starting $GITHUB_REPO#$GITHUB_BRANCH" "danger"
  else
    log "$NAME deployed"
    slack "$GITHUB_REPO#$GITHUB_BRANCH deployed to $HOST"
  fi

fi
